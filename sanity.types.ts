/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type ChatMessage = {
  _id: string
  _type: 'chatMessage'
  _createdAt: string
  _updatedAt: string
  _rev: string
  messageId?: string
  session?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'chatSession'
  }
  role?: 'system' | 'user' | 'assistant'
  metadata?: {
    custom?: string
  }
  parts?: Array<
    | {
        type?: string
        text?: string
        state?: 'streaming' | 'done'
        _type: 'textUIPart'
        _key: string
      }
    | {
        type?: string
        text?: string
        state?: 'streaming' | 'done'
        providerMetadata?: {
          data?: string
        }
        _type: 'reasoningUIPart'
        _key: string
      }
    | {
        type?: string
        name?: string
        toolCallId?: string
        state?: 'input-streaming' | 'input-available' | 'output-available' | 'output-error'
        input?: {
          data?: string
        }
        output?: {
          data?: string
        }
        errorText?: string
        providerExecuted?: boolean
        _type: 'toolUIPart'
        _key: string
      }
    | {
        type?: string
        sourceId?: string
        url?: string
        title?: string
        providerMetadata?: {
          data?: string
        }
        _type: 'sourceUrlUIPart'
        _key: string
      }
    | {
        type?: string
        sourceId?: string
        mediaType?: string
        title?: string
        filename?: string
        providerMetadata?: {
          data?: string
        }
        _type: 'sourceDocumentUIPart'
        _key: string
      }
    | {
        type?: string
        mediaType?: string
        filename?: string
        url?: string
        _type: 'fileUIPart'
        _key: string
      }
    | {
        type?: string
        name?: string
        dataId?: string
        data?: {
          content?: string
        }
        _type: 'dataUIPart'
        _key: string
      }
    | {
        type?: string
        _type: 'stepStartUIPart'
        _key: string
      }
  >
}

export type ChatSession = {
  _id: string
  _type: 'chatSession'
  _createdAt: string
  _updatedAt: string
  _rev: string
  users?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'user'
  }>
  lessons?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'lesson'
  }>
  sessionId?: string
  createdAt?: string
  lastActivity?: string
  status?: 'active' | 'inactive' | 'ended'
  metadata?: {
    userLevel?: string
    lessonTitle?: string
    totalMessages?: number
  }
}

export type Recommendation = {
  _id: string
  _type: 'recommendation'
  _createdAt: string
  _updatedAt: string
  _rev: string
  query?: string
  reason?: string
  createdFor?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'user'
  }
  courses?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'course'
  }>
  status?: 'in_progress' | 'completed' | 'failed'
  message?: string
}

export type Enrollment = {
  _id: string
  _type: 'enrollment'
  _createdAt: string
  _updatedAt: string
  _rev: string
  userEnrolled?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'user'
  }>
  course?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'course'
  }>
  contentsCompleted?: Array<
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'lesson'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'quiz'
      }
  >
  dateCompleted?: string
  percentComplete?: number
}

export type QuizAttempt = {
  _id: string
  _type: 'quizAttempt'
  _createdAt: string
  _updatedAt: string
  _rev: string
  user?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'user'
  }>
  quiz?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'quiz'
  }>
  course?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'course'
  }>
  chapter?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'chapter'
  }>
  attemptNumber?: number
  status?: 'in_progress' | 'submitted' | 'graded'
  answers?: Array<{
    questionIndex?: number
    selectedOptionIndex?: number
    isOutcome?: 'correct' | 'incorrect'
    timeTakenMs?: number
    _type: 'answer'
    _key: string
  }>
  correctCount?: number
  totalQuestions?: number
  score?: number
  percentage?: number
  startedAt?: string
  submittedAt?: string
  durationMs?: number
  feedback?: string
  metadata?: {
    custom?: string
  }
}

export type Quiz = {
  _id: string
  _type: 'quiz'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  description?: string
  maxAttempt?: number
  questions?: Array<{
    question?: string
    options?: Array<string>
    correctOptionIndex?: number
    explanation?: string
    _type: 'question'
    _key: string
  }>
}

export type Lesson = {
  _id: string
  _type: 'lesson'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  chapter?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'chapter'
  }>
  content?: string
}

export type Chapter = {
  _id: string
  _type: 'chapter'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  course?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'course'
  }>
  description?: string
  contents?: Array<
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'lesson'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'quiz'
      }
  >
}

export type Course = {
  _id: string
  _type: 'course'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  description?: string
  difficulty?: 'beginner' | 'intermediate' | 'advanced'
  thumbnail?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  trailer?: string
  topics?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'topic'
  }>
  chapters?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'chapter'
  }>
}

export type Topic = {
  _id: string
  _type: 'topic'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  description?: string
  icon?: string
  color?: Color
}

export type User = {
  _id: string
  _type: 'user'
  _createdAt: string
  _updatedAt: string
  _rev: string
  username?: string
  firstname?: string
  lastname?: string
  email?: string
  clerkId?: string
  onboardingStatus?: 'not_started' | 'completed'
  learningGoals?: Array<string>
  studyReason?: string
  studyPlan?: string
  level?: 'beginner' | 'intermediate' | 'advanced'
  studyStreak?: number
  streakStartDate?: number
  delivery_preference?: string
}

export type Color = {
  _type: 'color'
  hex?: string
  alpha?: number
  hsl?: HslaColor
  hsv?: HsvaColor
  rgb?: RgbaColor
}

export type RgbaColor = {
  _type: 'rgbaColor'
  r?: number
  g?: number
  b?: number
  a?: number
}

export type HsvaColor = {
  _type: 'hsvaColor'
  h?: number
  s?: number
  v?: number
  a?: number
}

export type HslaColor = {
  _type: 'hslaColor'
  h?: number
  s?: number
  l?: number
  a?: number
}

export type Markdown = string

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type AllSanitySchemaTypes =
  | ChatMessage
  | ChatSession
  | Recommendation
  | Enrollment
  | QuizAttempt
  | Quiz
  | Lesson
  | Chapter
  | Course
  | Topic
  | User
  | Color
  | RgbaColor
  | HsvaColor
  | HslaColor
  | Markdown
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData
export declare const internalGroqTypeReferenceTo: unique symbol
